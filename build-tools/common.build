<?xml version="1.0" encoding="utf-8"?>
<project name="FlickrDownloadr-Common">

  <property name="mac.app.name" value="flickr downloadr.app" />
  <property name="linux.bundle" value="linux-bundle" />

  <!-- Build Targets -->
  <target name="unitTestsOnly" depends="compilesolution, unitTests"/>
  <target name="allTests" depends="compilesolution, unitTests, boundarycrossingTests"/>
  <target name="createrelease" depends="createrelease-win, createrelease-mac, createrelease-linux" />

  <target name="cleanBin" unless="${target::has-executed('cleanBin')}">
    <echo message="Clean bin directory" />
    <delete dir="${bin.dir}" failonerror="false"  if="${directory::exists(bin.dir)}"/>
  </target>

  <target name="createBin" unless="${target::has-executed('createBin')}">
    <echo message="Create bin directory" />
    <mkdir dir="${bin.dir}" failonerror="true" unless="${directory::exists(bin.dir)}"/>
    <mkdir dir="${nunit.results.dir}" failonerror="true" unless="${directory::exists(nunit.results.dir)}"/>
  </target>

  <target name="increment-version" depends="createsecretconstantsclass">
    <echo message="Incrementing the version:" />
    <version buildtype="NoIncrement" revisiontype="Increment" startdate="2012-04-02" verbose="true"/>
    <call target="create-common-assemblyinfo" />
  </target>

  <target name="create-common-assemblyinfo">
    <!-- ensure CommonAssemblyInfo.cs is writable if it already exists -->
    <attrib file="${common.assembly.info}" readonly="false" if="${file::exists('${common.assembly.info}')}" />
    <!-- Get Copyright Symbol -->
    <script language="C#" prefix="csharp-functions" >
      <code>
        <![CDATA[
              [Function("get-copyright-symbol")]
              public static string Testfunc(  ) {
                  return "\u00a9";
              }
            ]]>
      </code>
    </script>
    <!-- generate the source file holding the common assembly-level attributes -->
    <asminfo output="${common.assembly.info}" language="CSharp">
      <imports>
        <import namespace="System" />
        <import namespace="System.Reflection" />
        <import namespace="System.Runtime.InteropServices" />
      </imports>
      <attributes>
        <attribute type="ComVisibleAttribute" value="false" />
        <attribute type="AssemblyTitleAttribute" value="flickrDownloadr" />
        <attribute type="AssemblyDescriptionAttribute" value="A cross-platform desktop app, written in Mono that would download (all or selected) photos from your photostream in their selected size along with their description, title and tags." />
        <attribute type="AssemblyConfigurationAttribute" value="${project.build.type}" />
        <attribute type="AssemblyCompanyAttribute" value="http://flickrdownloadr.com" />
        <attribute type="AssemblyProductAttribute" value="flickr downloadr" />
        <attribute type="AssemblyCopyrightAttribute" value="Copyright ${csharp-functions::get-copyright-symbol()} 2012-${datetime::get-year(datetime::now())} Haridas Pachuveetil" />
        <attribute type="AssemblyTrademarkAttribute" value="" />
        <attribute type="AssemblyCultureAttribute" value="" />
        <attribute type="AssemblyVersionAttribute" value="${buildnumber.version}" />
        <attribute type="AssemblyFileVersionAttribute" value="${buildnumber.version}" />
        <!-- <attribute type="AssemblyInformationalVersionAttribute" value="${buildnumber.major}.${buildnumber.minor}" /> -->
      </attributes>
    </asminfo>
  </target>

  <target name="unitTests">
    <echo message="Running FloydPink.Flickr.Downloadr.UnitTests..." />
    <property name="nunittest.testassemblypath" value="${unittests.assembly}" dynamic="true" />
    <call target="nunittest" />
  </target>

  <target name="boundarycrossingTests">
    <echo message="Running FloydPink.Flickr.Downloadr.BoundaryCrossingTests..." />
    <property name="nunittest.testassemblypath" value="${boundarycrossingtests.assembly}" dynamic="true" />
    <call target="nunittest" />
  </target>

  <target name="createsecretconstantsclass">
    <echo message="Creating the Secrets.cs file..." />
    <loadfile file="Secrets.cs.in" property="secrets-token-file">
      <filterchain>
        <replacetokens>
          <token key="SHAREDSECRET" value="${environment::get-variable('FLICKR_DOWNLOADR_SHARED_SECRET')}" />
          <token key="CONSUMERKEY" value="${environment::get-variable('FLICKR_DOWNLOADR_CONSUMER_KEY')}" />
          <token key="CONSUMERSECRET" value="${environment::get-variable('FLICKR_DOWNLOADR_CONSUMER_SECRET')}" />
        </replacetokens>
      </filterchain>
    </loadfile>
    <touch file="${secrets.out.file}" />
    <echo message="${secrets-token-file}" file="${secrets.out.file}" />
  </target>

  <target name="createinstallbuilderlicense">
    <echo message="Creating the Install Builder License File..." />
    <loadfile file="license.xml.in" property="license-token-file">
      <filterchain>
        <replacetokens>
          <token key="SIGNATURE" value="${environment::get-variable('INSTALL_BUILDER_LICENSE_SIGNATURE')}" />
        </replacetokens>
      </filterchain>
    </loadfile>
    <touch file="flickrdownloadrlicense.xml" />
    <echo append="true" message="${license-token-file}" file="flickrdownloadrlicense.xml" />
  </target>

  <target name="createmacappbundle" depends="unitTestsOnly">
    <echo message="Creating Mac OS X App bundle" />
    <mkdir dir="${mac.app.name}/Contents/MacOS/bin" />
    <loadfile file="Info.plist.in" property="plist-token-file">
      <filterchain>
        <replacetokens>
          <token key="VERSION" value="${buildnumber.version}" />
        </replacetokens>
      </filterchain>
    </loadfile>
    <touch file="${mac.app.name}/Contents/Info.plist" />
    <echo message="${plist-token-file}" file="${mac.app.name}/Contents/Info.plist" />
    <mkdir dir="${mac.app.name}/Contents/Resources" />
    <copy file="flickr-downloadr.icns" tofile="${mac.app.name}/Contents/Resources/flickr-downloadr.icns" />
    <copy todir="${mac.app.name}/Contents/MacOS/bin">
      <fileset basedir="${bin.dir}">
        <include name="Castle.Core.dll" />
        <include name="DotNetOpenAuth.dll" />
        <include name="flickr-downloadr.exe" />
        <include name="FloydPink.Flickr.Downloadr.Bootstrap.dll" />
        <include name="FloydPink.Flickr.Downloadr.Logic.dll" />
        <include name="FloydPink.Flickr.Downloadr.Model.dll" />
        <include name="FloydPink.Flickr.Downloadr.OAuth.dll" />
        <include name="FloydPink.Flickr.Downloadr.Presentation.dll" />
        <include name="FloydPink.Flickr.Downloadr.Repository.dll" />
        <include name="log4net.dll" />
        <include name="ServiceStack.Text.dll" />
        <include name="StructureMap.dll" />
        <include name="flickrdownloadr.log4net" />
      </fileset>
    </copy>
    <copy file="flickrdownloadr_launch_mac.sh" tofile="${mac.app.name}/Contents/MacOS/flickrdownloadr" />
    <move todir="${bin.dir}/${mac.app.name}">
      <fileset basedir="${mac.app.name}"/>
    </move>
  </target>

  <target name="createlinuxbundle" depends="unitTestsOnly">
    <echo message="Creating Linux bundle" />
    <mkdir dir="${linux.bundle}/bin" />
    <copy todir="${linux.bundle}/bin">
      <fileset basedir="${bin.dir}">
        <include name="Castle.Core.dll" />
        <include name="DotNetOpenAuth.dll" />
        <include name="flickr-downloadr.exe" />
        <include name="FloydPink.Flickr.Downloadr.Bootstrap.dll" />
        <include name="FloydPink.Flickr.Downloadr.Logic.dll" />
        <include name="FloydPink.Flickr.Downloadr.Model.dll" />
        <include name="FloydPink.Flickr.Downloadr.OAuth.dll" />
        <include name="FloydPink.Flickr.Downloadr.Presentation.dll" />
        <include name="FloydPink.Flickr.Downloadr.Repository.dll" />
        <include name="log4net.dll" />
        <include name="ServiceStack.Text.dll" />
        <include name="StructureMap.dll" />
        <include name="flickrdownloadr.log4net" />
      </fileset>
    </copy>
    <copy file="flickrdownloadr_launch_linux.sh" tofile="${linux.bundle}/flickrdownloadr" />
    <move todir="${bin.dir}/${linux.bundle}">
      <fileset basedir="${linux.bundle}"/>
    </move>
  </target>

</project>
